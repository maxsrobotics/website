---
interface Props {
    borderRadius?: string;
    width?: string;
    height?: string;
    divisor?: string;
};
const { borderRadius = '4em', width, height, divisor = 30 } = Astro.props;
---

<div class="tilt-box" 
     style=`--borderRadius: ${borderRadius}; width: ${width}; height: ${height}` 
     data-divisor={divisor}>
    <slot />
</div>

<style>
    .tilt-box {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        perspective: 1000px;
        border-radius: var(--borderRadius);

        /* Prevent jump on hover */
        transform-origin: center;
        transform-style: preserve-3d;
        will-change: transform, box-shadow;
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1); /* Add a default shadow */
    }

    .tilt-box:hover {
        /* A more subtle shadow that doesn't change box size */
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
    }
</style>

<script>
    const tiltBoxes = document.querySelectorAll(".tilt-box");

    tiltBoxes.forEach((tiltBox) => {
        if (tiltBox instanceof HTMLElement) {
            const divisor = Number(tiltBox.dataset.divisor) || 30;

            tiltBox.addEventListener("mousemove", (e: MouseEvent) => {
                const { width, height, left, top } = tiltBox.getBoundingClientRect();
                const x = e.clientX - left - width / 2;
                const y = e.clientY - top - height / 2;

                const rotateX = -y / (height / divisor);
                const rotateY = x / (width / divisor);

                tiltBox.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
            });

            tiltBox.addEventListener("mouseleave", () => {
                tiltBox.style.transform = "rotateX(0) rotateY(0)";
            });
        }
    });
</script>
